# 个人网站项目配置修复说明

## 📋 项目概述
这是一个基于 Next.js 15 + React 19 + TypeScript + Tailwind CSS 的个人网站项目，包含博客功能。

## 🔧 修复的问题

### 1. package.json 配置问题
**问题：**
- 使用了已废弃的 `next export` 命令
- 缺少 `autoprefixer` 依赖，但 PostCSS 配置中引用了它

**修复：**
- 移除了 `"export": "next export"` 脚本（Next.js 13+ 中已废弃）
- 添加了 `"autoprefixer": "^10.4.20"` 依赖

### 2. PostCSS 配置问题
**问题：**
- Tailwind CSS v4 需要使用 `@tailwindcss/postcss` 插件，而不是 `tailwindcss`

**修复：**
```javascript
// 修复前
plugins: {
  tailwindcss: {},
  autoprefixer: {},
}

// 修复后
plugins: {
  '@tailwindcss/postcss': {},
  autoprefixer: {},
}
```

### 3. Next.js 配置优化
**问题：**
- 包含了不必要的空配置项

**修复：**
- 移除了空的 `basePath: ''` 和 `assetPrefix: ''` 配置
- 保留了静态导出所需的配置

### 4. Tailwind CSS 配置增强
**问题：**
- 配置过于简单，缺少主题扩展

**修复：**
- 添加了自定义颜色主题（primary 色系）
- 添加了字体配置（Inter 字体）
- 添加了 TypeScript 类型注释

### 5. TypeScript 兼容性问题
**问题：**
- Next.js 15 中动态路由的 `params` 现在是 Promise 类型
- 代码中使用了同步方式访问 `params`

**修复：**
```typescript
// 修复前
interface BlogPostPageProps {
  params: { slug: string };
}
export default function BlogPostPage({ params }: BlogPostPageProps) {
  const post = getPostBySlug(params.slug);
}

// 修复后
interface BlogPostPageProps {
  params: Promise<{ slug: string }>;
}
export default async function BlogPostPage({ params }: BlogPostPageProps) {
  const { slug } = await params;
  const post = getPostBySlug(slug);
}
```

### 6. ESLint 警告修复
**问题：**
- 导入了但未使用的字体变量

**修复：**
- 移除了未使用的 `geistSans` 和 `geistMono` 变量
- 更新了 HTML lang 属性为 "zh-CN"
- 添加了 `font-sans` 类到 body 元素

### 7. 图片优化
**问题：**
- 使用了 `<img>` 标签而不是 Next.js 的 `<Image>` 组件

**修复：**
- 将所有 `<img>` 标签替换为 `<Image>` 组件
- 添加了适当的 width 和 height 属性
- 导入了 `next/image` 模块

## 🏗️ 项目架构说明

### 技术栈
- **框架：** Next.js 15.5.3 (React 全栈框架)
- **前端：** React 19.1.0 (用户界面库)
- **语言：** TypeScript 5 (带类型检查的 JavaScript)
- **样式：** Tailwind CSS 4 (实用优先的 CSS 框架)
- **构建工具：** PostCSS + Autoprefixer (CSS 处理)

### 项目结构
```
personal-website/
├── src/
│   ├── app/                    # Next.js App Router 目录
│   │   ├── blog/              # 博客相关页面
│   │   │   ├── [slug]/        # 动态路由：博客文章详情页
│   │   │   └── page.tsx       # 博客列表页
│   │   ├── globals.css        # 全局样式
│   │   ├── layout.tsx         # 根布局组件
│   │   └── page.tsx           # 首页
│   └── data/                  # 数据层
│       └── blog/              # 博客数据
├── public/                    # 静态资源
├── package.json               # 项目依赖和脚本
├── next.config.js            # Next.js 配置
├── tsconfig.json             # TypeScript 配置
├── tailwindcss.config.js     # Tailwind CSS 配置
├── postcss.config.mjs        # PostCSS 配置
└── eslint.config.mjs         # ESLint 配置
```

### 核心功能

#### 1. 静态网站生成 (SSG)
- 使用 `output: 'export'` 配置生成静态文件
- 适合部署到 GitHub Pages、Netlify 等静态托管服务

#### 2. 博客系统
- **博客列表页：** `/blog` - 显示所有博客文章
- **文章详情页：** `/blog/[slug]` - 动态路由显示具体文章
- **静态生成：** 使用 `generateStaticParams()` 预生成所有文章页面

#### 3. 响应式设计
- 使用 Tailwind CSS 实现移动端优先的响应式设计
- 支持深色模式（通过 CSS 变量）

#### 4. 性能优化
- Next.js Image 组件自动优化图片
- 静态生成减少服务器负载
- CSS 和 JavaScript 自动压缩

## 🚀 如何运行项目

### 开发环境
```bash
npm run dev          # 启动开发服务器 (http://localhost:3000)
```

### 生产构建
```bash
npm run build        # 构建生产版本
npm run start        # 启动生产服务器
```

### 代码检查
```bash
npm run lint         # 运行 ESLint 检查
```

## 📁 配置文件详解

### package.json
- 定义项目依赖和脚本命令
- 管理 React、Next.js、TypeScript 等核心依赖

### next.config.js
- Next.js 框架配置
- 设置静态导出、图片优化等选项

### tsconfig.json
- TypeScript 编译器配置
- 设置编译目标、模块解析、路径映射等

### tailwindcss.config.js
- Tailwind CSS 框架配置
- 定义自定义主题、颜色、字体等

### postcss.config.mjs
- PostCSS 处理器配置
- 集成 Tailwind CSS 和 Autoprefixer

### eslint.config.mjs
- ESLint 代码检查配置
- 集成 Next.js 和 TypeScript 规则

## 🎯 项目特点

1. **现代化技术栈：** 使用最新的 React 19 和 Next.js 15
2. **类型安全：** 全面的 TypeScript 支持
3. **性能优化：** 静态生成、图片优化、代码分割
4. **开发体验：** 热重载、类型检查、代码格式化
5. **部署友好：** 支持静态托管，无需服务器

## 🔍 常见问题

### Q: 为什么移除 Turbopack？
A: Turbopack 在处理 Tailwind CSS v4 时存在兼容性问题，使用标准 Webpack 构建更稳定。

### Q: 为什么 params 是 Promise？
A: Next.js 15 为了支持异步数据获取，将动态路由参数改为 Promise 类型。

### Q: 如何添加新的博客文章？
A: 在 `src/data/blog/posts.ts` 中添加新的文章数据即可。

### Q: 如何自定义主题？
A: 修改 `tailwindcss.config.js` 中的 `theme.extend` 部分。

## 📝 总结

通过这次修复，项目现在具备了：
- ✅ 完整的类型安全
- ✅ 现代化的构建流程
- ✅ 优化的性能表现
- ✅ 良好的开发体验
- ✅ 生产就绪的配置

项目可以正常构建和运行，适合作为个人网站或博客使用。